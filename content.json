{"pages":[{"title":"归档","text":"","path":"archive/index.html"},{"title":"分类","text":"","path":"categories/index.html"},{"title":"标签","text":"","path":"tags/index.html"}],"posts":[{"title":"live2d","text":"null","path":"2019/01/15/live2d/"},{"title":"如何让孩子爱上♂学习","text":"转载自bilibili正经科普哒！ 【附上简介】 这个是和谐版，原版可以去知乎或公号查看。这里有我上了「知乎 2018『互联网洞见者』」十问的一个最佳回答，提到了未来人工智能的问题，看完就明白你为什么一定要好好学习，踢毽根本不算什么。https://www.zhihu.com/question/299868516/answer/517742601","path":"2019/01/03/yjango/"},{"title":"【简易教程】新一代线稿自动上色软件Style2Paint的搭建方法","text":"还是贴吧看到的转过来了非常实用的上色服务，有网页版没有的模仿上色功能。 先说下硬件要求:例子1: i3-2350m+8g内存, 无显卡. 正常运行, 就是上色要上2分钟;例子2: i5-4590+12g内存, 无显卡, 正常运行, 上色30s内;例子3: 阿里云乞丐版服务器, 单核1Ghz+1g内存, 无显卡, 直接翻车;(原项目本来是需要N卡支持的, 不过这里我把代码改成cpu版的, 降了下硬件门槛)(系统为windows 64位, 没试过32位的, 不过可能会翻车, 因为内存太小) 需要下载的东西:(1)Anaconda : https://www.anaconda.com/download/#download到”Python 3.6 version”下直接点Download就行, 下载完后直接下一步到安装完就行了;(2) 源码: 度盘-&gt;1i5zOG0t 密码:dqg9下载完把压缩包放到D盘根目录, 然后”解压到当前文件夹”; 搭建:(1) 开始菜单–&gt;Anaconda3(64-bit)–&gt;Anaconda Prompt出现黑窗口然后, 输入以下命令, 输入一行, 回车, 安装完后继续输入下一行, 回车:pip install tensorflowpip install keraspip install chainerpip install bottlepip install h5pypip install opencv-python (2) 全部安装完后, 继续留在黑窗口:依次输入执行以下命令:d:cd style2paints-master/serverpython server.py然后需要等待一段时间来启动服务, 我那个i3-2350m的机子等了1分钟;等最后出现”Hit Ctrl-C to quit.”这句就说明启动成功了! 到这里就搭建成功了!(黑窗口不能关掉) 把玩:打开浏览器, 访问: http://127.0.0.1:8000/点”upload sketch”上传线稿, “upload reference”上传配色参考图, 然后点”colorize”, 然后耐心等待结果就行;等出现了上色结果后, 你会发现有些地方上错色了, 这是就点击”pen”, 在配色参考图中点选修正颜色, 然后在线稿中需要修正的地方随便涂几笔或点几笔都行, 然后再colorize, 以此类推;(线稿和参考图在 style2paints-master/images/images_for_reseachers)——-修正颜色示例:","path":"2018/12/22/GL-AI/"},{"title":"【原理】点开就变的图片原理分析","text":"点开就变的图片简单的制作方法的原理带Alpha通道的图像格式就能制作，下面只讨论灰度图像，因为对于彩色图像基本无解。屏幕显示一张有透明度的图像，必定要有背景才能显示出来，关键就在于这个背景是什么。背景大多情况下是纯黑或纯白。这类图片就是利用在不同背景下，显示的图像不同制作而成的。对于灰度图像的每个像素，屏幕显示使用下面这个公式：最后放出一张根据此原理做成的图，黑色背景下是正常的，白色背景下是透视&gt;///&lt;。如果想要反过来，需要穿白衣服或者调整两张原图像亮度。作者：九条可怜链接：https://www.zhihu.com/question/43520923/answer/120483162来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","path":"2018/12/22/ylimage/"},{"title":"【教程】点开就变的图片简单的制作方法(5)","text":"又双叒叕一个点击图片变化的方法这次的方法有点复杂是放大和缩小影响变化在QQ中可能会遇到一些比较“神奇”的图片，它们看似普通，但是当你点开看大图时，就会摇身一变，成了完全不一样的图。这种图一般都为灰色背景，图中图案为黑白。 原理：以QQ为例，在点开图之前，QQ默认的图片背景色是白色，点开后默认背景色是黑色。我们需要做的是将一个图分成两部分，一部分仅在黑色背景上显示，白色背景上完全看不到（真图）；另一部分仅在白色背景上显示，黑色背景上完全看不到（伪图）。但是如何让一个图只能在黑色的背景显示但是在白色背景完全不显示，而且不能是只有黑色和白色呢？那就是将“灰度（这个颜色有多灰）”转换成不透明度，比如可以将灰色转化成50%的黑，在白色背景上看起来效果是一样的，但是在黑色背景上，纯灰依然是纯灰，但是50%的黑+100%黑=100%黑，就显示不出来了。白色同理。工具： 1.Photoshop（演示中我会使用Photoshop CC 2015版本，Mac OS 所以可能看起来跟windows有些差距） 2.伪图（点开之前的图） 3.真图（点开之后的图） 准备好后，Here we go!第一步，制作 “灰色背景” 新建一个2x2像素的画板，并放大到3200%。创建2x2的画布注意右下角放大倍数3200% 使用一个像素粗细的铅笔将左下，右上，右下的像素涂黑。 然后选择（编辑-自定义图案-确定）这样这个画布就被当作图案储存了。第一步结束。第二步，填充背景再新建一个画布，推荐（1000*800左右）太大了在Photoshop中显示会有问题。新建图层-图层样式-图案叠加-（选中刚刚储存的图案）-缩放100%-叠加模式正常-100%不透明度-确定 背景填充配置 然后右键栅格化图层样式 选择-色彩范围 选择-取样颜色-颜色容差200，用吸管取左边色板中的黑色，确定选中图层1，重复上述步骤，在选颜色时用吸管取色板中白色部分。确定，Ctrl+J,得到图层2(again) ，重命名为“白色部分” 隐藏图层1. 第二步结束，效果如图 第三步，设置伪图 置入伪图，我就选了一张Conan 和 Haibara Ai的壁纸。 图像-调整-黑白-（不用改设置）-确定 图像-调整-反相 隐藏其它所有图层 编辑-定义画笔预设-（命名为“伪图”）-确定。 新建图层-（填充为黑色）-添加模版-选中模版-选中画笔工具-右键-找到刚刚设置的“伪图”图案-在画布中间点一下在右侧图层上右键，转换为智能对象，重命名“伪图” 第三步结束第四步，设置真图 原理同上，照片以链接形式放出。 置入真图，我就选了一张Code Lyoko的壁纸。 图像-调整-黑白-（不用改设置）-确定隐藏其它所有图层编辑-定义画笔预设-（命名为“真图”）-确定。新建图层-（填充为白色）-添加模版-选中模版-选中画笔工具-右键-找到刚刚设置的“真图”图案-在画布中间点一下转换为智能对象，重命名“真图”第四步结束第五步，分配背景。这里需要解释一下。因为在第二步填充背景时，我们将背景以3:1的方式分成了白色部分和黑色部分，即在一个2x2的方格内有1个白色部分和3个黑色部分。可以尝试将白色部分分给“真图”，如果效果不好再试试另一种方法。（我这次选的图适合将白色部分分给伪图）在“白色部分”图层缩略图按住ctrl——左键，再选中“伪图”图层，Ctrl+J.得到图层2，重命名为“伪图2”在“黑色部分”图层缩略图按住ctrl——左键，再选中“真图”图层，Ctrl+J.得到图层2，重命名为“真图2”将除了“伪图2”和“真图2”的其它图层隐藏，包括背景图层。第五步结束，效果图如下。 第六步，导出。 这就不说了，关键是一定要导出到png图片。 完成！ 作者：PlayerMin链接：https://www.zhihu.com/question/43473759/answer/118721356来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","path":"2018/12/22/psimage4/"},{"title":"【教程】点开就变的图片简单的制作方法(4)","text":"又一个点击图片变化的方法1.首先，打开PS找到你所中意的图2.将图片黑白化：如图所示，找到“色相/饱和度”3.在“饱和度”一栏拉到底黑白化完成4.找到到右下角的“通道”之后点击图中红圈所示的“将通道作为选区载入”5.点击完“将通道作为选区载入”后，PS就自动选择了图片中浅色的部分但是我们要去除图中深色的部分所以点击“反选”6.“反选”后，再按下“Delete”键就把深色的地方消除啦~（虽然看上去有点奇怪）7.然而，其实这样子并没有完全消除灰色的部分所以，最后找到“色阶”将“输出色阶”一开始在左边的黑色小三角拉到右边这样就大功告成啦，别忘了用.PNG格式保存哦 进阶：如何抠出方形区域1.按照之前的步骤制作好图片将制作好的图片拷贝一份，再在最底层加上黑色的背景2.将拷贝图和黑色背景合并在一起，此时显示的是原图在贴吧上打开的效果3.选择你想要保留的区域4.在新图层将你所选择的区域粘贴……接下来大家都懂啦","path":"2018/12/22/psimage3/"},{"title":"【教程】点开就变的图片简单的制作方法(3)","text":"还有一个点击图片变化的方法【将图层混合发挥到极致】 #制作不同底色下显示不同内容的图片此方法： 适合任何图片繁琐 繁琐 繁琐（重要的话说三次）—————————预览图:—————————— 看不懂的直接跳到下一个分割线吧 先看这个：http://tieba.baidu.com/p/3580736085?fr=frs 要求：两张图片每个上下图层对应的通道内 且 每个上下图层对应像素内，亮图B的明度值都要大于暗图A 原理（每个通道、每个像素）：要制作的图片为X ，X的蒙版(不透明度)为P，暗图为A，亮图为B白底：XP + 1(1-P) = B黑底：XP + 0(1-P) = A简化：XP + 1-P = B ①XP = A ②②-①得：A-B = P-1，即：A-B+1 = P得到了P，代入②X = A/P—————————实战：先准备两张图片可随意选择，效果差最好一张亮(B)，一张暗(A)，效果好这里随意找了两张自带图片的弹幕：导入Ps，并调整大小（此处略）为了方便，先去色（此处略）接下来把图片彻底的变亮变暗合并图层【如果自认为素材足够好的话，请跳过以上步骤】复制B，将B反相调整图层顺序、混合模式并盖印盖印完记得将混合模式调整为正常，下同至此，透明通道做完了 调整图层顺序、混合模式并盖印选择图层P，切换到通道选项卡，在RGB通道缩略图上Ctrl+左键，回到图层选项卡，点击图层X，为X添加蒙版（图略） 添加底色看看上色（将蒙版移到别的图层，免得合并图层时被并没了）把其他的图层眼睛戳瞎保存为.png完成！——————————","path":"2018/12/21/psimage2/"},{"title":"【教程】点开就变的图片简单的制作方法(2)手机PS","text":"另一个图片点击变化的方法，用手机PS制作的教程。╭(′▽`)╯(1)先按照图中位置摆放。直接看得到的在上边，然后黑白去色(2)然后风格化，阀值。前景色为黑色，透明度50%左右，背景色为白色，透明度0%。阀值50%左右调到自己认为合适，另一个100%(3)然后调整图层顺序如图中所示，隐藏白色图层，发现全黑就可以了(4)把图层调到下面第一张图的位置，然后-阀值，前景色为黑色，透明度0%，背景色为白色，透明度为25%左右，阀值，平滑度如图中所示阀值为大概数值，需要自己调到合适(5)再按照下面第一张图中调整图层顺序，然后显示第一个图层，如第二张图中所示(6)大家会发现会有第一张图层的残影，这时候就去-调整-曲线，按照下图调整下第一张图层，调到看不见为止 然后就可以隐藏纯黑和纯白图层，保存为png格式就可以了。 有些图片并没有那么容易调整，就需要大家慢慢调试曲线和阀值。 最后上完成图","path":"2018/12/21/test360/"},{"title":"【教程】点开就变的图片简单的制作方法(1)","text":"以前收藏的教程感觉很有意思搬过来了点击此图片测试 (☄⊙ω⊙)☄适用于贴吧等和黑色背景的图片查看器 #注意背景为黑色情况下才能显示里图片 ##例如贴吧或者某些手机自带的图库是黑色背景 #另一种方法","path":"2018/12/21/psimage/"},{"title":"[原理] Live2D Cubism Moc 文件格式分析","text":"偶尔在百度帖吧看到一篇技术向文章就转来了 Live2D Cubism Moc 文件格式分析转载自百度贴吧https://tieba.baidu.com/p/2896971262 Live2D Cubism Moc(*.moc)文件是用于为CubismSDK提供绘制数据的文件格式。这个文件包含了图层、参数、坐标系和组件，这四部分信息。一个Moc文件和一个图像文件（用于存储纹理），在理论上就能够提供重现角色所需的全部信息（这里不包括动作动画）。该文档介绍了Moc文件的数据组织形式和解析方法。要理解该文档，您可能需要具备一定的编程基础。 1 概述图1 解析Moc文件所涉及的类的关系图 在我们的例子中，将使用一些面向对象的概念来解释Moc文件的结构。这些类和Cubism SDK所涉及的类有一定的关联，但并不是等价的。 Cubism SDK提供的封装好的类库来解析Moc文件，因此您可能无法通过引用了SDK的代码来了解Moc文件内部的组织情况。本文档附带了一个代码例子重现了Moc文件的解析步骤。这个例子仅仅用于展示Moc文件的数据内容，因此去除了原有SDK涉及的大多数设计模式，这么做的好处是减少代码量，降低阅读者的门槛。现在，您只需要安装一个免费的Visual Studio 2013 for Windows Desktop软件就可以运行和调试程序代码。 下图给出了本文档的类和SDK的类的部分关系，但仍然需要强调的是，不要用试图完全依靠本文档的概念来取代官方的SDK文档。 图2 本文档和CubismSDK在命名上的差异 2 知识准备 要分析Moc文件，您需要了解有关对象序列化的知识。程序运行的状态以数据的形式存储在内存中，内存是随机访问的，因此数据的地址分布可能杂乱无章。当我们需要永久保存这些数据，就需要将这些数据组织成字节序列，存入硬盘的文件。而当我们需要恢复程序的运行状态，就需要把硬盘文件中的字节序列解码成内存中的数据结构，以便程序进行访问。这种数据的转换过程被称为序列化和反序列化，它通常用于文件存储和网络数据传输。 常见的序列化技术包括Xml序列化和Json序列化。它们是开放标准，因此能够很容易地找到平台集成的或是开放源代码的类库，来简化序列化技术的应用。然而Moc文件采用的是一种相对封闭的序列化方式，因此我们需要手工实现其各个对象的反序列化代码。 3 简单数据类型的解析 序列化技术的精髓在于将内存数据和字节序列之间进行可逆的转换。那，为什么要转换为字节序列？ 事实上，由于一个字节能表示的数据范围有限，因此常常使用多个字节来描述整数、小数等概念。而使用多个字节来表示数据，就引入了一个问题，就是这些字节应该以什么顺序来存储。这就好像我们只有十个阿拉伯数字，但是需要描述“万”或者“亿”的数量概念。对于人类，我们从高位到低位依次书写各个数位上的阿拉伯数字符号，在计算机领域，这种方式被称为大端序。而另一种书写顺序是从低位到高位依次书写，这种方式被称为小端序。小端序是我们身边所广泛受到使用的x86/x64/ARM架构处理器的一个特色。将内存数据转换为字节序列，能够避免因为字节序所带来的兼容性问题。 Moc文件采用大端序作为序列化标准，x86/x64/ARM架构处理器采用小端序来解读大余1字节的数据内容。因此您的程序应该考虑字节序的转化。 Moc文件只包含4种简单数据类型：字节（char）、整数（int）、浮点数（float）、数组长度（变长整数）。其中只有整数和浮点数涉及字节序的转化，因为它们的长度是4字节。数组长度是一种长度可变的整数，其读取方式是设定一个初值为0的计数器，然后不断读取单个字节，对于每个读取到的字节，把计数器左移7位，然后把读取字节的低7位加到计数器中，如果这个字节的最高位非零，那么停止读取并返回计数器的值。 关于其代码实现，您可以参考例子程序中的以下方法： l SerializationHelper::DeserializeInt32(FILE)l SerializationHelper::DeserializeSingle(FILE)l SerializationHelper::DeserializeArrayLength(FILE*) 4 对象的解析 在Moc文件中，数据不是简单类型就是对象类型。对于简单类型的数据，直接使用第3节介绍的方法来读取就可以。而要读取对象类型，需要先读取一个字节的类型编号，然后再调用与这个类型号所对应的反序列化方法。其中，0x81类型号表示的是一个抽象的对象类型，您需要继续读取类型号来确定对象的种类。 另外，对于对象类型，序列化解析器需要收集其全部引用，并按照构造完成的时间顺序存入一个列表。列表的作用是可以帮助解析器重用以前创建的对象。当在Moc文件中遇到0x21类型号时，接下来所读取的一个整数将表示以构造对象列表中的某个特定元素的索引。我们称这种对象为历史对象。 关于其代码实现，您可以参考例子程序中的以下方法： l Document::DeserializeQuery(FILE*) 5 数组类型的解析 数组类型是对象类型的一种。Moc文件只涉及4种数组：字符数组、整数数组、浮点数数组、对象数组。 数组类型只包含3部分，各部分按顺序排列为：类型号（1字节），数组长度（变长），数据内容（根据内容类型和数组长度来确定）。 字符数组的类型号包括0x06（图层Id）、0x32（组件Id）、0x33（坐标系Id）、0x3c（参数Id）。整数数组的类型号是0x19，浮点数组的类型号是0x1b，对象数组的类型号是0x0f。关于其代码实现，您可以参考例子程序中的以下方法： l SerializationHelper::DeserializeInt32Array(FILE)l SerializationHelper::DeserializeSingleArray(FILE)l SerializationHelper::DeserializeObjectArray(FILE,Document) 6 Cubism对象的解析 Cubism对象完全是由简单数据类型和对象数据类型所构成。因此前四节所介绍的方法的调用组合能够被用于解析Cubism对象。 参数（Parameter），类型号0x03，包括4部分，按顺序排列为：最小值（简单/float），最大值（简单/float），默认值（简单/float），名字（数组/字符数组）。 参数采样（ParameterSample），类型号0x43，包括3部分，按顺序排列为：参数名称（数组/字符数组，或对象/历史对象），采样点的数量（简单/int），采样点的取值（数组/浮点数数组）。 参数采样集（ParameterSamples），类型号0x42，包括1部分：参数采样的数组（数组/对象数组）。 旋转变换参数（RotationDeformer::Desc），类型号0x45，包括5部分，按顺序排列为：中心X坐标（简单/float），中心Y坐标（简单/float），缩放X倍（简单/float），缩放Y倍（简单/float），旋转角度（简单/float）。 旋转变换（RotationDeformer），类型号0x44，包括4部分，按顺序排列为：坐标系名称（数组/字符数组），父坐标系名称（数组/字符数组，或对象/历史对象），参数采样集（对象/ ParameterSamples），采样数据（数组/ RotationDeformer::Desc数组）。 扭曲变换（CurvedSurfaceDeformer），类型号0x41，包括6部分，按顺序排列为：坐标系名称（数组/字符数组），父坐标系名称（数组/字符数组，或对象/历史对象），X方向分段数（简单/int），Y方向分段数（简单/int），参数采样集（对象/ ParameterSamples），采样数据（数组/ 浮点数数组的数组）。 组件（Component），类型号0x46，包括13部分，按顺序排列为：坐标系名称（数组/字符数组），父坐标系名称（数组/字符数组，或对象/历史对象），参数采样集（对象/ ParameterSamples），覆盖顺序（简单/int），覆盖顺序采样数据（数组/整数数组），透明度采样数据（数组/浮点数数组），纹理编号（简单/int），顶点数量（简单/int），三角形数量（简单/int），位置索引数组（数组/整数数组），位置采样数据（数组/浮点数数组的数组），纹理坐标数组（数组/浮点数数组），颜色混合类型（简单/int）。 图层（Part），类型号0x05，包括3部分，按顺序排列为：图层状态（简单/byte），图层名称（数组/字符数组），坐标系数组（数组/对象数组），组件数组（数组/ Component数组）。 文档（Document）包括6部分，按顺序排列为：前缀（8字节），参数数组（数组/ Parameter数组），图层数组（数组/ Part数组），画面宽度（简单/int），画面高度（简单/int），后缀（4字节）。 7 值得注意的数据 在组件对象中，我们很高兴地找到了图形绘制流水线所需要的关键数据：纹理编号、顶点位置坐标、顶点纹理坐标和索引编号。这意味着我们有机会脱离SDK，直接调用图形编程接口来绘制Cubism模型。 参数控制是通过插值来实现的，因此包含参数采样集（ParameterSamples）的类是我们需要关注的。总共有3个，它们分别是：旋转变换（RotationDeformer），扭曲变换（CurvedSurfaceDeformer），组件（Component）。这三种类型可以接受参数控制，并用于调整组件顶点的位置。 旋转变换的采样数据包括各个采样点下的旋转和缩放值。当实际参数取值为两个采样值中间的某个值时，通过线性插值的方法来确定该情况下的旋转和缩放值。 扭曲变换的采样数据包括一个二重浮点数数组。外层数组用于描述各个采样点下的网格，内层数组用于描述特定网格的各个顶点位置。当实际参数取值为两个采样值中间的某个值时，对每个顶点进行线性插值，来确定顶点的位置，因此最终能够得到一个处于两种采样网格中间的网格。 组件的采样数据比较多，包括顶点位置、不透明度、覆盖顺序。因此通过参数控制，不仅能细腻地控制图像组件本身的形状，也可以控制其出现、消失，甚至改变几个组件的覆盖关系。同样，对于两个采样值中间的取值，使用线性插值来确定状态。 8 例子的源代码https://onedrive.live.com/redir?resid=BF245E76A574F404%2112643","path":"2018/12/12/原理-Live2D-Cubism-Moc-文件格式分析/"},{"title":"test","text":"","path":"2018/12/11/test/"},{"title":"酱紫吗","text":"标题一标题二标题。。算了我看你是在刁难我","path":"2018/12/07/酱紫吗/"}]}